(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
const loader = new ex.Loader();
const txWall = new ex.Texture("./images/Wall_Black.png");
const txCrate = new ex.Texture("./images/Crate_Yellow.png");
const txEndPoint = new ex.Texture("./images/EndPoint_Yellow.png");
const txPlayer = new ex.Texture("./images/Character4.png");
const txGround = new ex.Texture("./images/GroundGravel_Concrete.png");
loader.addResource(txWall);
loader.addResource(txCrate);
loader.addResource(txEndPoint);
loader.addResource(txPlayer);
loader.addResource(txGround);
class Cell extends ex.Actor {
    constructor(x, y, color) {
        super(x * Cell.size, y * Cell.size, Cell.size, Cell.size, color);
    }
}
Cell.size = 64;
class Wall extends Cell {
    constructor(x, y) { super(x, y, ex.Color.Gray); }
    onInitialize(engine) {
        this.addDrawing(txWall);
    }
}
class Holder extends Cell {
    constructor(x, y) { super(x, y, ex.Color.Black); }
    onInitialize(engine) {
        this.addDrawing(txEndPoint);
    }
}
class Ground extends Cell {
    constructor(x, y) { super(x, y, ex.Color.Black); }
    onInitialize(engine) {
        this.setZIndex(-1);
        this.addDrawing(txGround);
    }
}
class Box extends Cell {
    constructor(x, y) { super(x, y, ex.Color.Orange); }
    onInitialize(engine) {
        this.addDrawing(txCrate);
    }
}
class Player extends Cell {
    constructor(level, gridX, gridY) {
        super(gridX, gridY, ex.Color.White);
        this.gridX = gridX;
        this.gridY = gridY;
        this.level = level;
    }
    onInitialize(engine) {
        this.setZIndex(1);
        this.addDrawing(txPlayer);
    }
    update(engine, delta) {
        super.update(engine, delta);
        if (engine.input.keyboard.wasPressed(ex.Input.Keys.W) || engine.input.keyboard.wasPressed(ex.Input.Keys.Up)) {
            this.moveBy(0, -1);
        }
        if (engine.input.keyboard.wasPressed(ex.Input.Keys.S) || engine.input.keyboard.wasPressed(ex.Input.Keys.Down)) {
            this.moveBy(0, 1);
        }
        if (engine.input.keyboard.wasPressed(ex.Input.Keys.D) || engine.input.keyboard.wasPressed(ex.Input.Keys.Right)) {
            this.moveBy(1, 0);
        }
        if (engine.input.keyboard.wasPressed(ex.Input.Keys.A) || engine.input.keyboard.wasPressed(ex.Input.Keys.Left)) {
            this.moveBy(-1, 0);
        }
    }
    moveBy(dx, dy) {
        let cell = this.level.grid[this.gridY + dy][this.gridX + dx];
        const delta = new ex.Vector(dx, dy).scale(Cell.size);
        if (cell instanceof Wall) {
            return;
        }
        if (cell instanceof Box) {
            let nextCell = this.level.grid[this.gridY + 2 * dy][this.gridX + 2 * dx];
            if (nextCell === undefined) {
                cell.pos = cell.pos.add(delta);
                this.level.grid[this.gridY + dy][this.gridX + dx] = undefined;
                this.level.grid[this.gridY + 2 * dy][this.gridX + 2 * dx] = cell;
            }
            else if (nextCell instanceof Holder) {
                this.level.grid[this.gridY + dy][this.gridX + dx] = undefined;
                this.level.grid[this.gridY + 2 * dy][this.gridX + 2 * dx] = undefined;
                cell.kill();
                nextCell.kill();
                this.level.closeHole();
            }
            else {
                return;
            }
        }
        this.gridX += dx;
        this.gridY += dy;
        this.pos = this.pos.add(delta);
    }
}
class Level extends ex.Scene {
    constructor(level) {
        super();
        this.holes = 0;
        this.rawLevel = level;
    }
    onInitialize(engine) {
        // TODO: Count x as the longest row's length.
        this.size = new ex.Vector(this.rawLevel[0].length, this.rawLevel.length);
        this.grid = new Array();
        for (let i = 0; i < this.size.y; i++) {
            this.grid[i] = new Array(this.size.x);
            for (let j = 0; j < this.size.x; j++) {
                let cell = undefined;
                switch (this.rawLevel[i][j]) {
                    case " ":
                        break;
                    case ".":
                        this.addGround(j, i);
                        break;
                    case "#":
                        cell = new Wall(j, i);
                        this.addGround(j, i);
                        break;
                    case "0":
                        cell = new Box(j, i);
                        this.addGround(j, i);
                        break;
                    case "^":
                        cell = new Holder(j, i);
                        this.holes += 1;
                        this.addGround(j, i);
                        break;
                    case "@":
                        this.player = new Player(this, j, i);
                        // Player is not a part of a grid.
                        this.add(this.player);
                        this.addGround(j, i);
                        break;
                }
                if (cell) {
                    this.add(cell);
                    this.grid[i][j] = cell;
                }
            }
        }
        let camera = new ex.LockedCamera();
        const widthFactor = (engine.getDrawWidth() - 20) / this.size.x;
        const heightFactor = (engine.getDrawHeight() - 20) / this.size.y;
        // camera.zoom(Math.floor(Math.min(widthFactor, heightFactor) / Cell.size) || 1);
        camera.zoom(Math.min(widthFactor, heightFactor) / Cell.size);
        camera.move(new ex.Vector(this.size.x * Cell.size / 2 - Cell.size / 2, this.size.y * Cell.size / 2 - Cell.size / 2), 0);
        this.camera = camera;
    }
    addGround(i, j) {
        this.add(new Ground(i, j));
    }
    closeHole() {
        this.holes -= 1;
        if (this.holes === 0) {
            alert("You won!");
        }
    }
}
const simpleLevel = [
    "  ######",
    "  # ..@#",
    "  # 00 #",
    "  ## ###",
    "   # #  ",
    "   # #  ",
    "#### #  ",
    "#    ## ",
    "# #   # ",
    "#   # # ",
    "###   # ",
    "  ##### "
];
const level1a = [
    "######## ######",
    "# #@   ###    #",
    "#.## 00    0  #",
    "#.##  00# 0 0 #",
    "#.##    #     #",
    "#.#######0#####",
    "#.#    #      #",
    "#.######      #",
    "#  ....0000   #",
    "#  #####      #",
    "####   ########"
];
const level1b = [
    "######  ##### ",
    "#....#  #...# ",
    "#.0..####.0.# ",
    "#.0......0..# ",
    "#..###@###0.# ",
    "##########.###",
    "#..^^^.#.....#",
    "#..#####0....#",
    "##^#   #.0...#",
    " #^#####.0...#",
    " #..^^^^0.0..#",
    " #..##########",
    " ####         "
];
const level2a = [
    " ####                    ",
    "## @########             ",
    "#          #             ",
    "# 0#####0# #             ",
    "#  #   # 0 #             ",
    "# 0 0    0##             ",
    "# 0  0  #  #             ",
    "# ####0 ## #             ",
    "#  0   0 # ##            ",
    "# ###0#   0 #############",
    "#   #  0# 0 ............#",
    "#  0      ###############",
    "#####  #  #              ",
    "    #######              "
];
const level2b = [
    "###########                 ",
    "#    #    ###               ",
    "#  00#00   @#               ",
    "#     0   ###               ",
    "#    #    #                 ",
    "## #########                ",
    "#  0 #     #                ",
    "# 00 #0 0 0#                ",
    "#  0     0 #                ",
    "# 000#0  0 #################",
    "#    #  0 0 ...............#",
    "############################"
];
const level3a = [
    "  ########         ",
    "### #    #         ",
    "#   0    ###       ",
    "# # 00#00# #       ",
    "# 00#      #       ",
    "# #  0 #   #       ",
    "#    #0##0##       ",
    "#  00  0   #       ",
    "# ##   #   #       ",
    "#    #0#####       ",
    "###  0 ############",
    "  #  0@...........#",
    "  #################"
];
const level3b = [
    "##############     ",
    "#        #   #     ",
    "# 00  #00# # #     ",
    "#  # 0 0 #00 #     ",
    "## #  #  # # #     ",
    "#   ##       #     ",
    "#   # 0 #   ##     ",
    "# 0 #0 #   ###     ",
    "##0 #  ############",
    "#  0    ..........#",
    "#   # @############",
    "########           "
];
const level4a = [
    "#########################",
    "#@      ................#",
    "#       #################",
    "####### ######           ",
    " #           #           ",
    " # 0 0 0 0 0 #           ",
    "######## #####           ",
    "#   0 0  0 0 #           ",
    "#   0        #           ",
    "##### ########           ",
    " #  0 0 0   #            ",
    " #     0    #            ",
    " # 0 0   0 ##            ",
    "####### ####             ",
    "#  0     #               ",
    "#        #               ",
    "#   ######               ",
    "#####                    "
];
const level4b = [
    "  #############",
    "  #  .........#",
    "  #  .........#",
    "  #  ##########",
    "#### #    #####",
    "#  #0##  ##   #",
    "#     #### 0  #",
    "# 00  #  #  0 #",
    "##  00#   00 ##",
    " #0  0   #0  # ",
    " # 00 #  #  0# ",
    " # 0 0#### 0 # ",
    " #       #  ## ",
    " #### 0  # ##  ",
    "    ### ## #   ",
    "     # 0   #   ",
    "     #@ #  #   ",
    "     #######   "
];
let game = new ex.Engine({
    displayMode: ex.DisplayMode.FullScreen
});
game.setAntialiasing(true);
game.backgroundColor = ex.Color.DarkGray;
game.addScene("level1b", new Level(level1b));
game.goToScene("level1b");
game.start(loader);
const movePlayerBy = function (dx, dy) {
    if (game.currentScene instanceof Level) {
        game.currentScene.player.moveBy(dx, dy);
    }
};
["click", "touchstart"].forEach(function (action) {
    document.getElementById("control-left").addEventListener(action, function (event) {
        event.preventDefault();
        movePlayerBy(-1, 0);
    });
    document.getElementById("control-up").addEventListener(action, function (event) {
        event.preventDefault();
        movePlayerBy(0, -1);
    });
    document.getElementById("control-down").addEventListener(action, function (event) {
        event.preventDefault();
        movePlayerBy(0, 1);
    });
    document.getElementById("control-right").addEventListener(action, function (event) {
        event.preventDefault();
        movePlayerBy(1, 0);
    });
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
